package com.strumsoft.sideview.demo.intrestbuttonlayout;import com.strumsoft.sideview.demo.R;import android.content.Context;import android.graphics.Color;import android.text.TextUtils;import android.text.TextUtils.TruncateAt;import android.util.DisplayMetrics;import android.util.TypedValue;import android.view.ViewGroup;import android.widget.Button;import android.widget.LinearLayout;import android.widget.LinearLayout.LayoutParams;public class ViewerIntrestButton extends Button {    private static int BUTTON_MAX_WIDTH = 240;    private static int BUTTON_PADDING_LEFT = 12;    private static int BUTTON_PADDING_RIGHT = 12;    private static int BUTTON_PADDING_TOP = 0;    private static int BUTTON_PADDING_BOTTOM = 0;    private static int BUTTON_HEIGHT = 32;    public static int BUTTON_MARGIN_TOP = 0;    public static int BUTTON_MARGIN_BOTTOM = 0;    public static int BUTTON_MARGIN_LEFT = 0;    public static int BUTTON_MARGIN_RIGHT = 16;    public static int BUTTON_TEXT_SIZE = 18;    private IntrestData mData;    private int mExpectedWidth;    public ViewerIntrestButton(Context context, IntrestData data) {        super(context);        this.mData = data;        final DisplayMetrics metrics = context.getResources().getDisplayMetrics();        BUTTON_MAX_WIDTH = Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 240, metrics));        BUTTON_PADDING_LEFT = BUTTON_PADDING_RIGHT = Math.round(TypedValue.applyDimension(                TypedValue.COMPLEX_UNIT_DIP, 12, metrics));        BUTTON_MARGIN_TOP = BUTTON_MARGIN_BOTTOM = Math.round(TypedValue.applyDimension(                TypedValue.COMPLEX_UNIT_DIP, 6, metrics));        BUTTON_HEIGHT = Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 30, metrics));        BUTTON_MARGIN_LEFT = BUTTON_MARGIN_RIGHT = Math.round(TypedValue.applyDimension(                TypedValue.COMPLEX_UNIT_DIP, 8, metrics));        BUTTON_TEXT_SIZE = Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 15, metrics));        initButton();    }    /**     * Set button style.     */    private void initButton() {        /* Set Button text */        String dataName = mData.getName();        if (TextUtils.isEmpty(dataName)) {            setText(mData.getInterest());        } else {            setText(dataName);        }        /* Set Button style */        setEllipsize(TruncateAt.END);        setBackgroundResource(R.drawable.message_composer_bubble_btn);        setTextColor(Color.BLACK);        setPadding(BUTTON_PADDING_LEFT, BUTTON_PADDING_TOP, BUTTON_PADDING_RIGHT, BUTTON_PADDING_BOTTOM);        setSingleLine(true);        ViewGroup.MarginLayoutParams mlp = new ViewGroup.MarginLayoutParams(LayoutParams.WRAP_CONTENT,                BUTTON_HEIGHT);        setMaxWidth(BUTTON_MAX_WIDTH);        mlp.setMargins(BUTTON_MARGIN_LEFT, BUTTON_MARGIN_TOP, BUTTON_MARGIN_RIGHT, BUTTON_MARGIN_BOTTOM);        setLayoutParams(new LinearLayout.LayoutParams(mlp));    }    /**     * Get button width expected by calculating text size     *      * @return     */    public int getExpectedWidth() {        mExpectedWidth = getWidth();        /* if width is not measured, calculate it manually */        if (mExpectedWidth == 0) {            mExpectedWidth += (int) getPaint().measureText(this.getText().toString()) + BUTTON_PADDING_LEFT                    + BUTTON_PADDING_RIGHT;        }        if (mExpectedWidth > BUTTON_MAX_WIDTH)            mExpectedWidth = BUTTON_MAX_WIDTH;        /* Add margin value */        mExpectedWidth += BUTTON_MARGIN_LEFT + BUTTON_MARGIN_RIGHT;        return mExpectedWidth;    }    /**     * Get bubbleData     *      * @return     */    public IntrestData getBubbleData() {        return mData;    }    public void refreshButton() {        int width = getExpectedWidth();        mData.refreshInterestInfo();        /* Set Button text */        String dataName = mData.getName();        if (TextUtils.isEmpty(dataName)) {            setText(mData.getInterest());        } else {            setText(dataName);        }        setMaxWidth(width);    }}