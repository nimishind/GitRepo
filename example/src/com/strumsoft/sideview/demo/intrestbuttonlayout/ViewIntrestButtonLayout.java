package com.strumsoft.sideview.demo.intrestbuttonlayout;import java.util.ArrayList;import android.app.AlertDialog;import android.content.Context;import android.os.Handler;import android.util.AttributeSet;import android.view.View;import android.view.ViewGroup;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.view.animation.AnimationSet;import android.view.animation.LayoutAnimationController;import android.widget.LinearLayout;import android.widget.Toast;public class ViewIntrestButtonLayout extends LinearLayout {    public static final int ACTIVITY_BUBLELAYOUT_REQUEST_ADD_TO_CONTACT = 0x07011214;    public static final int SENDER = 1, INTEREST = 2, CC_Interest = 3;    private Context mContext;    // Interest    // private Handler mHandler;    private LinearLayout mBubbleInterestLayout;    private LinearLayout mBottomLayout;    private int mExpectedLayoutWidth = 0;    int mType = 0;    String mInterest;    private ArrayList<IntrestData> mBubbleDataList;    private ArrayList<ViewerIntrestButton> mBubbleButtonList;    private AlertDialog.Builder mBubbleClickMenuDialog;    private int mIndexOfSelectedBubbleByClickingButton;    public static void setLayoutAnim_slidedownfromtop(ViewGroup panel) {        AnimationSet set = new AnimationSet(true);        Animation animation = new AlphaAnimation(0.0f, 1.0f);        animation.setDuration(350);        set.addAnimation(animation);        LayoutAnimationController controller = new LayoutAnimationController(set, 0.25f);        panel.setLayoutAnimation(controller);    }    public ViewIntrestButtonLayout(Context context, AttributeSet attrs) {        super(context, attrs);        mContext = context;        mBubbleButtonList = new ArrayList<ViewerIntrestButton>();    }    /**     * Initialize BubbleLayout     */    public void registerChildViewsFromOwnXML() {        mBubbleInterestLayout = (LinearLayout) getChildAt(0);    }    public void registerMessageHandler(Handler handler) {        // mHandler = handler;    }    public LinearLayout getBubbleLayout() {        return mBubbleInterestLayout;    }    public void setExpectedLayoutWidth(int width) {        mExpectedLayoutWidth = width;    }    private int getExpectedLayoutWidth() {        return mExpectedLayoutWidth;    }    public void setBtnListFromDataList(ArrayList<IntrestData> dataList) {        mBubbleDataList = new ArrayList<IntrestData>(dataList);    }    /**     * update one bubble button after "add to interest"     *      * @param mode     * @return     */    public boolean updateBubbleAfterSavingInterest() {        mBubbleButtonList.get(mIndexOfSelectedBubbleByClickingButton).refreshButton();        return true;    }    /**     * Check whether this layout has the bubble     *      * @return     */    public boolean isEmpty() {        if (mBubbleButtonList == null || mBubbleButtonList.isEmpty() || mBubbleInterestLayout == null                || mBubbleInterestLayout.getChildCount() == 0) {            return true;        }        return false;    }    /**     * Check whether there's invalid interest     *      * @return     */    public boolean isValidInterest() {        for (ViewerIntrestButton bb : mBubbleButtonList) {            if (!bb.getBubbleData().isValidInterest()) {                return false;            }        }        return true;    }    /**     * Rebuild the current bubblelayout with mBubbleButtonList     *      * @param newWidth     *            , if newWidth is greater than 0, it initiates with it     */    synchronized public void rebuildBubbleLayout(int newWidth) {        int totalWidth = 0;        int layoutWidth = 0;        /* Remove views from each containers */        int layoutChildCount = mBubbleInterestLayout.getChildCount();        for (int i = 0; i < layoutChildCount; i++) {            ((ViewGroup) mBubbleInterestLayout.getChildAt(i)).removeAllViews();        }        mBubbleInterestLayout.removeAllViews();        /* Make one line LinearLayout and fill up layout with buttons. */        if (!mBubbleButtonList.isEmpty()) {            mBottomLayout = makeOneLineLinearLayout(mContext);            mBubbleInterestLayout.addView(mBottomLayout);        } else {            /* Hide mBubbleInterestLayout */            mBubbleInterestLayout.setVisibility(View.GONE);        }        for (ViewerIntrestButton bb : mBubbleButtonList) {            totalWidth += bb.getExpectedWidth();            /* Fill up oneLineLayout with Button */            layoutWidth = (newWidth > 0) ? newWidth : mBubbleInterestLayout.getWidth();            if (totalWidth <= layoutWidth) {                mBottomLayout.addView(bb);            } else if (totalWidth == bb.getExpectedWidth()) {                /*                 * if the button width is over than one line width, it will be abbreviated case) totalWidth ==                 * 0 and totalWidth > mBubbleInterestLayout.getWidth()                 */                mBottomLayout.addView(bb);            } else {                mBottomLayout = makeOneLineLinearLayout(mContext);                mBubbleInterestLayout.addView(mBottomLayout);                mBottomLayout.addView(bb);                totalWidth = bb.getExpectedWidth();            }        }    }    public void resetLayout() {        /* Remove views from each containers */        mBubbleButtonList.clear();        int layoutChildCount = mBubbleInterestLayout.getChildCount();        for (int i = 0; i < layoutChildCount; i++) {            ((ViewGroup) mBubbleInterestLayout.getChildAt(i)).removeAllViews();        }        mBubbleInterestLayout.removeAllViews();    }    /**     *      *      * @return returns interests     */    public String getInterestesAsDelimiterType() {        StringBuffer interestes = new StringBuffer();        for (ViewerIntrestButton bb : mBubbleButtonList) {            interestes.append(bb.getBubbleData().getInterest()).append("; ");        }        return interestes.toString().trim();    }    public String[] getInterestesAsStringArray() {        int listSize = mBubbleButtonList.size();        String[] stringArray = new String[listSize];        for (int i = 0; i < listSize; i++) {            stringArray[i] = mBubbleButtonList.get(i).getBubbleData().getInterest();        }        return stringArray;    }    /**     * Add the button with specific interest     *      * @param interest     * @param animationOn     */    public boolean addButton(String interest) {        return addButton(makeOneBubbleButton(mContext, new IntrestData(interest)));    }    /**     * interest Add the button with specific interest     *      * @param interest     * @param interestID     * @param animationOn     */    public boolean addButton(String interest, String interestID, int index) {        return addButton(makeOneBubbleButton(mContext, new IntrestData(interest, interestID, index)));    }    /**     * Add the button with BubbleData & Animation On     *      * @param data     * @param animationOn     */    public boolean addButton(IntrestData data) {        return addButton(makeOneBubbleButton(mContext, data));    }    /**     * Add the button with BubbleButton     *      * @param button     */    private Boolean addButton(ViewerIntrestButton button) {        int totalWidth = 0;        int containerWidth = 0;        int bottomLayoutChildCount = 0;        int indexOfLastLayout = mBubbleInterestLayout.getChildCount();        int expectedButtonWidth = 0;        if (button == null) {            return false;        }        expectedButtonWidth = button.getExpectedWidth();        if ((indexOfLastLayout <= 0) || (mBottomLayout == null)) {            mBubbleInterestLayout.setVisibility(View.VISIBLE); /*                                                                * Show mBubbleInterestLayout                                                                */            mBottomLayout = makeOneLineLinearLayout(mContext);            mBubbleInterestLayout.addView(mBottomLayout);        } else {            mBottomLayout = (LinearLayout) mBubbleInterestLayout.getChildAt(indexOfLastLayout - 1);        }        bottomLayoutChildCount = mBottomLayout.getChildCount();        /* Get total width of views attached on current oneLineLayout */        for (int i = 0; i < bottomLayoutChildCount; i++) {            totalWidth += ((ViewerIntrestButton) mBottomLayout.getChildAt(i)).getExpectedWidth();        }        totalWidth += expectedButtonWidth;        /* Get the width of container. */        containerWidth = mBubbleInterestLayout.getWidth();        if (containerWidth == 0) {            containerWidth = (this.getWidth() == 0) ? getExpectedLayoutWidth() : this.getWidth();        }        /* Add view to oneLineLayout */        if (totalWidth <= containerWidth) {            mBottomLayout.addView(button);        } else if (totalWidth == expectedButtonWidth) {            /*             * if the button width is over than one line width, it will be abbreviated case) totalWidth == 0             * and totalWidth > mBubbleInterestLayout.getWidth()             */            mBottomLayout.addView(button);        } else {            mBottomLayout = makeOneLineLinearLayout(mContext);            mBubbleInterestLayout.addView(mBottomLayout);            mBottomLayout.addView(button);        }        return true;    }    /*     * check whether the last button is selected     */    public boolean isSelectedLastButton() {        if (!mBubbleButtonList.isEmpty()) {            return mBubbleButtonList.get(mBubbleButtonList.size() - 1).isSelected();        }        return false;    }    public boolean selectLastButton() {        if (!mBubbleButtonList.isEmpty()) {            mBubbleButtonList.get(mBubbleButtonList.size() - 1).setSelected(true);            return true;        }        return false;    }    public void deSelectLastButton() {        if (!mBubbleButtonList.isEmpty()) {            mBubbleButtonList.get(mBubbleButtonList.size() - 1).setSelected(false);        }    }    // public void deleteSelectedLastButton(){    // if ( !mBubbleButtonList.isEmpty() ){    // removeButton(mBubbleButtonList.size()-1);    // }    // }    /**     * make a LinearLayout with specific layoutparam     *      * @param context     * @return     */    private LinearLayout makeOneLineLinearLayout(Context context) {        LinearLayout ll = new LinearLayout(context);        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,                LayoutParams.WRAP_CONTENT);        ll.setLayoutParams(params);        ll.setOrientation(LinearLayout.HORIZONTAL);        return ll;    }    /**     * make a Bubble button with event listener and animation     *      * @param context     * @param data     * @param animationOn     * @return     */    private ViewerIntrestButton makeOneBubbleButton(Context context, IntrestData data) {        ViewerIntrestButton button;        /* Create a Button */        button = new ViewerIntrestButton(context, data);        /* Set a creating animation */        button.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                showBubbleButtonClickMenu(v);            }        });        /* Add a data to list */        mBubbleButtonList.add(button);        return button;    }    /**     * Show Bubble click Dialog menu     *      * @param v     */    private void showBubbleButtonClickMenu(View v) {        ViewerIntrestButton button = (ViewerIntrestButton) v;        Toast.makeText(mContext, "Button Option here" + button.getBubbleData().getInterest(), 1000).show();    }    public void setType(int type, String interest) {        mType = type;        mInterest = interest;    }}